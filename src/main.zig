const std = @import("std");
const assert = std.debug.assert;
const log = std.log.scoped(.p11);
const testing = std.testing;

const cryptoki = @cImport({
    @cInclude("cryptoki.h");
});

const PKCS11Token = @This();

functionList: cryptoki.CK_FUNCTION_LIST_PTR,

pub fn init(path: []const u8) !PKCS11Token {
    log.debug("Loading PKCS#11 library from path: {s}\n", .{path});
    var runtime = try std.DynLib.open(path);
    defer runtime.close();

    log.debug("Obtaining function list from PKCS#11 runtime.\n", .{});
    var p11funcs: cryptoki.CK_FUNCTION_LIST_PTR = undefined;
    const getFunctionList: cryptoki.CK_C_GetFunctionList =
        runtime.lookup(cryptoki.CK_C_GetFunctionList, "C_GetFunctionList").?;

    const rv = getFunctionList.?(&p11funcs);
    assert(decodeRv(rv) == ReturnValue.OK);

    return PKCS11Token{ .functionList = p11funcs };
}

test "it can load a PKCS#11 library." {
    _ = try PKCS11Token.init("/lib64/pkcs11/libsofthsm2.so");
}

pub fn Initialize(self: *const PKCS11Token, args: ?*cryptoki.CK_C_INITIALIZE_ARGS) TokenError!void {
    const rv = self.functionList.*.C_Initialize.?(args);
    const result = decodeRv(rv);

    if (result != ReturnValue.OK) {
        return returnValueToError(result);
    }
}

test "it can initialize" {
    const token = try PKCS11Token.init("/lib64/pkcs11/libsofthsm2.so");
    try token.Initialize(null);
}

pub fn GetTokenInfo(self: *const PKCS11Token) TokenError!*cryptoki.CK_TOKEN_INFO {
    var tokenInfo: cryptoki.CK_TOKEN_INFO = undefined;
    const rv = self.functionList.*.C_GetTokenInfo.?(0, &tokenInfo);

    const result = decodeRv(rv);
    std.debug.print("GetTokenInfo Result: {s}", .{result.toString()});

    if (result != ReturnValue.OK) {
        return returnValueToError(result);
    }

    return &tokenInfo;
}

test "it can get token information" {
    const token = try PKCS11Token.init("/lib64/pkcs11/libsofthsm2.so");
    const info = try token.GetTokenInfo();
    try testing.expectEqual("foo", info.manufacturerID[0..3]);
}

const TokenError = error{
    CANCEL,
    HOST_MEMORY,
    SLOT_ID_INVALID,
    GENERAL_ERROR,
    FUNCTION_FAILED,
    ARGUMENTS_BAD,
    NO_EVENT,
    NEED_TO_CREATE_THREADS,
    CANT_LOCK,
    ATTRIBUTE_READ_ONLY,
    ATTRIBUTE_SENSITIVE,
    ATTRIBUTE_TYPE_INVALID,
    ATTRIBUTE_VALUE_INVALID,
    ACTION_PROHIBITED,
    DATA_INVALID,
    DATA_LEN_RANGE,
    DEVICE_ERROR,
    DEVICE_MEMORY,
    DEVICE_REMOVED,
    ENCRYPTED_DATA_INVALID,
    ENCRYPTED_DATA_LEN_RANGE,
    FUNCTION_CANCELED,
    FUNCTION_NOT_PARALLEL,
    FUNCTION_NOT_SUPPORTED,
    KEY_HANDLE_INVALID,
    KEY_SIZE_RANGE,
    KEY_TYPE_INCONSISTENT,
    KEY_NOT_NEEDED,
    KEY_CHANGED,
    KEY_NEEDED,
    KEY_INDIGESTIBLE,
    KEY_FUNCTION_NOT_PERMITTED,
    KEY_NOT_WRAPPABLE,
    KEY_UNEXTRACTABLE,
    MECHANISM_INVALID,
    MECHANISM_PARAM_INVALID,
    OBJECT_HANDLE_INVALID,
    OPERATION_ACTIVE,
    OPERATION_NOT_INITIALIZED,
    PIN_INCORRECT,
    PIN_INVALID,
    PIN_LEN_RANGE,
    PIN_EXPIRED,
    PIN_LOCKED,
    SESSION_CLOSED,
    SESSION_COUNT,
    SESSION_HANDLE_INVALID,
    SESSION_PARALLEL_NOT_SUPPORTED,
    SESSION_READ_ONLY,
    SESSION_EXISTS,
    SESSION_READ_ONLY_EXISTS,
    SESSION_READ_WRITE_SO_EXISTS,
    SIGNATURE_INVALID,
    SIGNATURE_LEN_RANGE,
    TEMPLATE_INCOMPLETE,
    TEMPLATE_INCONSISTENT,
    TOKEN_NOT_PRESENT,
    TOKEN_NOT_RECOGNIZED,
    TOKEN_WRITE_PROTECTED,
    UNWRAPPING_KEY_HANDLE_INVALID,
    UNWRAPPING_KEY_SIZE_RANGE,
    UNWRAPPING_KEY_TYPE_INCONSISTENT,
    USER_ALREADY_LOGGED_IN,
    USER_NOT_LOGGED_IN,
    USER_PIN_NOT_INITIALIZED,
    USER_TYPE_INVALID,
    USER_ANOTHER_ALREADY_LOGGED_IN,
    USER_TOO_MANY_TYPES,
    WRAPPED_KEY_INVALID,
    WRAPPED_KEY_LEN_RANGE,
    WRAPPING_KEY_HANDLE_INVALID,
    WRAPPING_KEY_SIZE_RANGE,
    WRAPPING_KEY_TYPE_INCONSISTENT,
    RANDOM_SEED_NOT_SUPPORTED,
    RANDOM_NO_RNG,
    DOMAIN_PARAMS_INVALID,
    CURVE_NOT_SUPPORTED,
    BUFFER_TOO_SMALL,
    SAVED_STATE_INVALID,
    INFORMATION_SENSITIVE,
    STATE_UNSAVEABLE,
    CRYPTOKI_NOT_INITIALIZED,
    CRYPTOKI_ALREADY_INITIALIZED,
    MUTEX_BAD,
    MUTEX_NOT_LOCKED,
    NEW_PIN_MODE,
    NEXT_OTP,
    EXCEEDED_MAX_ITERATIONS,
    FIPS_SELF_TEST_FAILED,
    LIBRARY_LOAD_FAILED,
    PIN_TOO_WEAK,
    PUBLIC_KEY_INVALID,
    FUNCTION_REJECTED,
};

fn returnValueToError(rv: ReturnValue) TokenError {
    const value = switch (rv) {
        .CANCEL => TokenError.CANCEL,
        .HOST_MEMORY => TokenError.HOST_MEMORY,
        .SLOT_ID_INVALID => TokenError.SLOT_ID_INVALID,
        .GENERAL_ERROR => TokenError.GENERAL_ERROR,
        .FUNCTION_FAILED => TokenError.FUNCTION_FAILED,
        .ARGUMENTS_BAD => TokenError.ARGUMENTS_BAD,
        .NO_EVENT => TokenError.NO_EVENT,
        .NEED_TO_CREATE_THREADS => TokenError.NEED_TO_CREATE_THREADS,
        .CANT_LOCK => TokenError.CANT_LOCK,
        .ATTRIBUTE_READ_ONLY => TokenError.ATTRIBUTE_READ_ONLY,
        .ATTRIBUTE_SENSITIVE => TokenError.ATTRIBUTE_SENSITIVE,
        .ATTRIBUTE_TYPE_INVALID => TokenError.ATTRIBUTE_TYPE_INVALID,
        .ATTRIBUTE_VALUE_INVALID => TokenError.ATTRIBUTE_VALUE_INVALID,
        .ACTION_PROHIBITED => TokenError.ACTION_PROHIBITED,
        .DATA_INVALID => TokenError.DATA_INVALID,
        .DATA_LEN_RANGE => TokenError.DATA_LEN_RANGE,
        .DEVICE_ERROR => TokenError.DEVICE_ERROR,
        .DEVICE_MEMORY => TokenError.DEVICE_MEMORY,
        .DEVICE_REMOVED => TokenError.DEVICE_REMOVED,
        .ENCRYPTED_DATA_INVALID => TokenError.ENCRYPTED_DATA_INVALID,
        .ENCRYPTED_DATA_LEN_RANGE => TokenError.ENCRYPTED_DATA_LEN_RANGE,
        .FUNCTION_CANCELED => TokenError.FUNCTION_CANCELED,
        .FUNCTION_NOT_PARALLEL => TokenError.FUNCTION_NOT_PARALLEL,
        .FUNCTION_NOT_SUPPORTED => TokenError.FUNCTION_NOT_SUPPORTED,
        .KEY_HANDLE_INVALID => TokenError.KEY_HANDLE_INVALID,
        .KEY_SIZE_RANGE => TokenError.KEY_SIZE_RANGE,
        .KEY_TYPE_INCONSISTENT => TokenError.KEY_TYPE_INCONSISTENT,
        .KEY_NOT_NEEDED => TokenError.KEY_NOT_NEEDED,
        .KEY_CHANGED => TokenError.KEY_CHANGED,
        .KEY_NEEDED => TokenError.KEY_NEEDED,
        .KEY_INDIGESTIBLE => TokenError.KEY_INDIGESTIBLE,
        .KEY_FUNCTION_NOT_PERMITTED => TokenError.KEY_FUNCTION_NOT_PERMITTED,
        .KEY_NOT_WRAPPABLE => TokenError.KEY_NOT_WRAPPABLE,
        .KEY_UNEXTRACTABLE => TokenError.KEY_UNEXTRACTABLE,
        .MECHANISM_INVALID => TokenError.MECHANISM_INVALID,
        .MECHANISM_PARAM_INVALID => TokenError.MECHANISM_PARAM_INVALID,
        .OBJECT_HANDLE_INVALID => TokenError.OBJECT_HANDLE_INVALID,
        .OPERATION_ACTIVE => TokenError.OPERATION_ACTIVE,
        .OPERATION_NOT_INITIALIZED => TokenError.OPERATION_NOT_INITIALIZED,
        .PIN_INCORRECT => TokenError.PIN_INCORRECT,
        .PIN_INVALID => TokenError.PIN_INVALID,
        .PIN_LEN_RANGE => TokenError.PIN_LEN_RANGE,
        .PIN_EXPIRED => TokenError.PIN_EXPIRED,
        .PIN_LOCKED => TokenError.PIN_LOCKED,
        .SESSION_CLOSED => TokenError.SESSION_CLOSED,
        .SESSION_COUNT => TokenError.SESSION_COUNT,
        .SESSION_HANDLE_INVALID => TokenError.SESSION_HANDLE_INVALID,
        .SESSION_PARALLEL_NOT_SUPPORTED => TokenError.SESSION_PARALLEL_NOT_SUPPORTED,
        .SESSION_READ_ONLY => TokenError.SESSION_READ_ONLY,
        .SESSION_EXISTS => TokenError.SESSION_EXISTS,
        .SESSION_READ_ONLY_EXISTS => TokenError.SESSION_READ_ONLY_EXISTS,
        .SESSION_READ_WRITE_SO_EXISTS => TokenError.SESSION_READ_WRITE_SO_EXISTS,
        .SIGNATURE_INVALID => TokenError.SIGNATURE_INVALID,
        .SIGNATURE_LEN_RANGE => TokenError.SIGNATURE_LEN_RANGE,
        .TEMPLATE_INCOMPLETE => TokenError.TEMPLATE_INCOMPLETE,
        .TEMPLATE_INCONSISTENT => TokenError.TEMPLATE_INCONSISTENT,
        .TOKEN_NOT_PRESENT => TokenError.TOKEN_NOT_PRESENT,
        .TOKEN_NOT_RECOGNIZED => TokenError.TOKEN_NOT_RECOGNIZED,
        .TOKEN_WRITE_PROTECTED => TokenError.TOKEN_WRITE_PROTECTED,
        .UNWRAPPING_KEY_HANDLE_INVALID => TokenError.UNWRAPPING_KEY_HANDLE_INVALID,
        .UNWRAPPING_KEY_SIZE_RANGE => TokenError.UNWRAPPING_KEY_SIZE_RANGE,
        .UNWRAPPING_KEY_TYPE_INCONSISTENT => TokenError.UNWRAPPING_KEY_TYPE_INCONSISTENT,
        .USER_ALREADY_LOGGED_IN => TokenError.USER_ALREADY_LOGGED_IN,
        .USER_NOT_LOGGED_IN => TokenError.USER_NOT_LOGGED_IN,
        .USER_PIN_NOT_INITIALIZED => TokenError.USER_PIN_NOT_INITIALIZED,
        .USER_TYPE_INVALID => TokenError.USER_TYPE_INVALID,
        .USER_ANOTHER_ALREADY_LOGGED_IN => TokenError.USER_ANOTHER_ALREADY_LOGGED_IN,
        .USER_TOO_MANY_TYPES => TokenError.USER_TOO_MANY_TYPES,
        .WRAPPED_KEY_INVALID => TokenError.WRAPPED_KEY_INVALID,
        .WRAPPED_KEY_LEN_RANGE => TokenError.WRAPPED_KEY_LEN_RANGE,
        .WRAPPING_KEY_HANDLE_INVALID => TokenError.WRAPPING_KEY_HANDLE_INVALID,
        .WRAPPING_KEY_SIZE_RANGE => TokenError.WRAPPING_KEY_SIZE_RANGE,
        .WRAPPING_KEY_TYPE_INCONSISTENT => TokenError.WRAPPING_KEY_TYPE_INCONSISTENT,
        .RANDOM_SEED_NOT_SUPPORTED => TokenError.RANDOM_SEED_NOT_SUPPORTED,
        .RANDOM_NO_RNG => TokenError.RANDOM_NO_RNG,
        .DOMAIN_PARAMS_INVALID => TokenError.DOMAIN_PARAMS_INVALID,
        .CURVE_NOT_SUPPORTED => TokenError.CURVE_NOT_SUPPORTED,
        .BUFFER_TOO_SMALL => TokenError.BUFFER_TOO_SMALL,
        .SAVED_STATE_INVALID => TokenError.SAVED_STATE_INVALID,
        .INFORMATION_SENSITIVE => TokenError.INFORMATION_SENSITIVE,
        .STATE_UNSAVEABLE => TokenError.STATE_UNSAVEABLE,
        .CRYPTOKI_NOT_INITIALIZED => TokenError.CRYPTOKI_NOT_INITIALIZED,
        .CRYPTOKI_ALREADY_INITIALIZED => TokenError.CRYPTOKI_ALREADY_INITIALIZED,
        .MUTEX_BAD => TokenError.MUTEX_BAD,
        .MUTEX_NOT_LOCKED => TokenError.MUTEX_NOT_LOCKED,
        .NEW_PIN_MODE => TokenError.NEW_PIN_MODE,
        .NEXT_OTP => TokenError.NEXT_OTP,
        .EXCEEDED_MAX_ITERATIONS => TokenError.EXCEEDED_MAX_ITERATIONS,
        .FIPS_SELF_TEST_FAILED => TokenError.FIPS_SELF_TEST_FAILED,
        .LIBRARY_LOAD_FAILED => TokenError.LIBRARY_LOAD_FAILED,
        .PIN_TOO_WEAK => TokenError.PIN_TOO_WEAK,
        .PUBLIC_KEY_INVALID => TokenError.PUBLIC_KEY_INVALID,
        .FUNCTION_REJECTED => TokenError.FUNCTION_REJECTED,
        else => unreachable,
    };

    return value;
}

fn decodeRv(rv: c_ulong) ReturnValue {
    return @enumFromInt(rv);
}

const ReturnValue = enum(c_ulong) {
    OK = cryptoki.CKR_OK,
    CANCEL = cryptoki.CKR_CANCEL,
    HOST_MEMORY = cryptoki.CKR_HOST_MEMORY,
    SLOT_ID_INVALID = cryptoki.CKR_SLOT_ID_INVALID,
    GENERAL_ERROR = cryptoki.CKR_GENERAL_ERROR,
    FUNCTION_FAILED = cryptoki.CKR_FUNCTION_FAILED,
    ARGUMENTS_BAD = cryptoki.CKR_ARGUMENTS_BAD,
    NO_EVENT = cryptoki.CKR_NO_EVENT,
    NEED_TO_CREATE_THREADS = cryptoki.CKR_NEED_TO_CREATE_THREADS,
    CANT_LOCK = cryptoki.CKR_CANT_LOCK,
    ATTRIBUTE_READ_ONLY = cryptoki.CKR_ATTRIBUTE_READ_ONLY,
    ATTRIBUTE_SENSITIVE = cryptoki.CKR_ATTRIBUTE_SENSITIVE,
    ATTRIBUTE_TYPE_INVALID = cryptoki.CKR_ATTRIBUTE_TYPE_INVALID,
    ATTRIBUTE_VALUE_INVALID = cryptoki.CKR_ATTRIBUTE_VALUE_INVALID,
    ACTION_PROHIBITED = cryptoki.CKR_ACTION_PROHIBITED,
    DATA_INVALID = cryptoki.CKR_DATA_INVALID,
    DATA_LEN_RANGE = cryptoki.CKR_DATA_LEN_RANGE,
    DEVICE_ERROR = cryptoki.CKR_DEVICE_ERROR,
    DEVICE_MEMORY = cryptoki.CKR_DEVICE_MEMORY,
    DEVICE_REMOVED = cryptoki.CKR_DEVICE_REMOVED,
    ENCRYPTED_DATA_INVALID = cryptoki.CKR_ENCRYPTED_DATA_INVALID,
    ENCRYPTED_DATA_LEN_RANGE = cryptoki.CKR_ENCRYPTED_DATA_LEN_RANGE,
    FUNCTION_CANCELED = cryptoki.CKR_FUNCTION_CANCELED,
    FUNCTION_NOT_PARALLEL = cryptoki.CKR_FUNCTION_NOT_PARALLEL,
    FUNCTION_NOT_SUPPORTED = cryptoki.CKR_FUNCTION_NOT_SUPPORTED,
    KEY_HANDLE_INVALID = cryptoki.CKR_KEY_HANDLE_INVALID,
    KEY_SIZE_RANGE = cryptoki.CKR_KEY_SIZE_RANGE,
    KEY_TYPE_INCONSISTENT = cryptoki.CKR_KEY_TYPE_INCONSISTENT,
    KEY_NOT_NEEDED = cryptoki.CKR_KEY_NOT_NEEDED,
    KEY_CHANGED = cryptoki.CKR_KEY_CHANGED,
    KEY_NEEDED = cryptoki.CKR_KEY_NEEDED,
    KEY_INDIGESTIBLE = cryptoki.CKR_KEY_INDIGESTIBLE,
    KEY_FUNCTION_NOT_PERMITTED = cryptoki.CKR_KEY_FUNCTION_NOT_PERMITTED,
    KEY_NOT_WRAPPABLE = cryptoki.CKR_KEY_NOT_WRAPPABLE,
    KEY_UNEXTRACTABLE = cryptoki.CKR_KEY_UNEXTRACTABLE,
    MECHANISM_INVALID = cryptoki.CKR_MECHANISM_INVALID,
    MECHANISM_PARAM_INVALID = cryptoki.CKR_MECHANISM_PARAM_INVALID,
    OBJECT_HANDLE_INVALID = cryptoki.CKR_OBJECT_HANDLE_INVALID,
    OPERATION_ACTIVE = cryptoki.CKR_OPERATION_ACTIVE,
    OPERATION_NOT_INITIALIZED = cryptoki.CKR_OPERATION_NOT_INITIALIZED,
    PIN_INCORRECT = cryptoki.CKR_PIN_INCORRECT,
    PIN_INVALID = cryptoki.CKR_PIN_INVALID,
    PIN_LEN_RANGE = cryptoki.CKR_PIN_LEN_RANGE,
    PIN_EXPIRED = cryptoki.CKR_PIN_EXPIRED,
    PIN_LOCKED = cryptoki.CKR_PIN_LOCKED,
    SESSION_CLOSED = cryptoki.CKR_SESSION_CLOSED,
    SESSION_COUNT = cryptoki.CKR_SESSION_COUNT,
    SESSION_HANDLE_INVALID = cryptoki.CKR_SESSION_HANDLE_INVALID,
    SESSION_PARALLEL_NOT_SUPPORTED = cryptoki.CKR_SESSION_PARALLEL_NOT_SUPPORTED,
    SESSION_READ_ONLY = cryptoki.CKR_SESSION_READ_ONLY,
    SESSION_EXISTS = cryptoki.CKR_SESSION_EXISTS,
    SESSION_READ_ONLY_EXISTS = cryptoki.CKR_SESSION_READ_ONLY_EXISTS,
    SESSION_READ_WRITE_SO_EXISTS = cryptoki.CKR_SESSION_READ_WRITE_SO_EXISTS,
    SIGNATURE_INVALID = cryptoki.CKR_SIGNATURE_INVALID,
    SIGNATURE_LEN_RANGE = cryptoki.CKR_SIGNATURE_LEN_RANGE,
    TEMPLATE_INCOMPLETE = cryptoki.CKR_TEMPLATE_INCOMPLETE,
    TEMPLATE_INCONSISTENT = cryptoki.CKR_TEMPLATE_INCONSISTENT,
    TOKEN_NOT_PRESENT = cryptoki.CKR_TOKEN_NOT_PRESENT,
    TOKEN_NOT_RECOGNIZED = cryptoki.CKR_TOKEN_NOT_RECOGNIZED,
    TOKEN_WRITE_PROTECTED = cryptoki.CKR_TOKEN_WRITE_PROTECTED,
    UNWRAPPING_KEY_HANDLE_INVALID = cryptoki.CKR_UNWRAPPING_KEY_HANDLE_INVALID,
    UNWRAPPING_KEY_SIZE_RANGE = cryptoki.CKR_UNWRAPPING_KEY_SIZE_RANGE,
    UNWRAPPING_KEY_TYPE_INCONSISTENT = cryptoki.CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT,
    USER_ALREADY_LOGGED_IN = cryptoki.CKR_USER_ALREADY_LOGGED_IN,
    USER_NOT_LOGGED_IN = cryptoki.CKR_USER_NOT_LOGGED_IN,
    USER_PIN_NOT_INITIALIZED = cryptoki.CKR_USER_PIN_NOT_INITIALIZED,
    USER_TYPE_INVALID = cryptoki.CKR_USER_TYPE_INVALID,
    USER_ANOTHER_ALREADY_LOGGED_IN = cryptoki.CKR_USER_ANOTHER_ALREADY_LOGGED_IN,
    USER_TOO_MANY_TYPES = cryptoki.CKR_USER_TOO_MANY_TYPES,
    WRAPPED_KEY_INVALID = cryptoki.CKR_WRAPPED_KEY_INVALID,
    WRAPPED_KEY_LEN_RANGE = cryptoki.CKR_WRAPPED_KEY_LEN_RANGE,
    WRAPPING_KEY_HANDLE_INVALID = cryptoki.CKR_WRAPPING_KEY_HANDLE_INVALID,
    WRAPPING_KEY_SIZE_RANGE = cryptoki.CKR_WRAPPING_KEY_SIZE_RANGE,
    WRAPPING_KEY_TYPE_INCONSISTENT = cryptoki.CKR_WRAPPING_KEY_TYPE_INCONSISTENT,
    RANDOM_SEED_NOT_SUPPORTED = cryptoki.CKR_RANDOM_SEED_NOT_SUPPORTED,
    RANDOM_NO_RNG = cryptoki.CKR_RANDOM_NO_RNG,
    DOMAIN_PARAMS_INVALID = cryptoki.CKR_DOMAIN_PARAMS_INVALID,
    CURVE_NOT_SUPPORTED = cryptoki.CKR_CURVE_NOT_SUPPORTED,
    BUFFER_TOO_SMALL = cryptoki.CKR_BUFFER_TOO_SMALL,
    SAVED_STATE_INVALID = cryptoki.CKR_SAVED_STATE_INVALID,
    INFORMATION_SENSITIVE = cryptoki.CKR_INFORMATION_SENSITIVE,
    STATE_UNSAVEABLE = cryptoki.CKR_STATE_UNSAVEABLE,
    CRYPTOKI_NOT_INITIALIZED = cryptoki.CKR_CRYPTOKI_NOT_INITIALIZED,
    CRYPTOKI_ALREADY_INITIALIZED = cryptoki.CKR_CRYPTOKI_ALREADY_INITIALIZED,
    MUTEX_BAD = cryptoki.CKR_MUTEX_BAD,
    MUTEX_NOT_LOCKED = cryptoki.CKR_MUTEX_NOT_LOCKED,
    NEW_PIN_MODE = cryptoki.CKR_NEW_PIN_MODE,
    NEXT_OTP = cryptoki.CKR_NEXT_OTP,
    EXCEEDED_MAX_ITERATIONS = cryptoki.CKR_EXCEEDED_MAX_ITERATIONS,
    FIPS_SELF_TEST_FAILED = cryptoki.CKR_FIPS_SELF_TEST_FAILED,
    LIBRARY_LOAD_FAILED = cryptoki.CKR_LIBRARY_LOAD_FAILED,
    PIN_TOO_WEAK = cryptoki.CKR_PIN_TOO_WEAK,
    PUBLIC_KEY_INVALID = cryptoki.CKR_PUBLIC_KEY_INVALID,
    FUNCTION_REJECTED = cryptoki.CKR_FUNCTION_REJECTED,
    VENDOR_DEFINED = cryptoki.CKR_VENDOR_DEFINED,

    pub fn toString(Self: ReturnValue) []const u8 {
        const value = switch (Self) {
            .OK => "CKR_OK",
            .CANCEL => "CKR_CANCEL",
            .HOST_MEMORY => "CKR_HOST_MEMORY",
            .SLOT_ID_INVALID => "CKR_SLOT_ID_INVALID",
            .GENERAL_ERROR => "CKR_GENERAL_ERROR",
            .FUNCTION_FAILED => "CKR_FUNCTION_FAILED",
            .ARGUMENTS_BAD => "CKR_ARGUMENTS_BAD",
            .NO_EVENT => "CKR_NO_EVENT",
            .NEED_TO_CREATE_THREADS => "CKR_NEED_TO_CREATE_THREADS",
            .CANT_LOCK => "CKR_CANT_LOCK",
            .ATTRIBUTE_READ_ONLY => "CKR_ATTRIBUTE_READ_ONLY",
            .ATTRIBUTE_SENSITIVE => "CKR_ATTRIBUTE_SENSITIVE",
            .ATTRIBUTE_TYPE_INVALID => "CKR_ATTRIBUTE_TYPE_INVALID",
            .ATTRIBUTE_VALUE_INVALID => "CKR_ATTRIBUTE_VALUE_INVALID",
            .ACTION_PROHIBITED => "CKR_ACTION_PROHIBITED",
            .DATA_INVALID => "CKR_DATA_INVALID",
            .DATA_LEN_RANGE => "CKR_DATA_LEN_RANGE",
            .DEVICE_ERROR => "CKR_DEVICE_ERROR",
            .DEVICE_MEMORY => "CKR_DEVICE_MEMORY",
            .DEVICE_REMOVED => "CKR_DEVICE_REMOVED",
            .ENCRYPTED_DATA_INVALID => "CKR_ENCRYPTED_DATA_INVALID",
            .ENCRYPTED_DATA_LEN_RANGE => "CKR_ENCRYPTED_DATA_LEN_RANGE",
            .FUNCTION_CANCELED => "CKR_FUNCTION_CANCELED",
            .FUNCTION_NOT_PARALLEL => "CKR_FUNCTION_NOT_PARALLEL",
            .FUNCTION_NOT_SUPPORTED => "CKR_FUNCTION_NOT_SUPPORTED",
            .KEY_HANDLE_INVALID => "CKR_KEY_HANDLE_INVALID",
            .KEY_SIZE_RANGE => "CKR_KEY_SIZE_RANGE",
            .KEY_TYPE_INCONSISTENT => "CKR_KEY_TYPE_INCONSISTENT",
            .KEY_NOT_NEEDED => "CKR_KEY_NOT_NEEDED",
            .KEY_CHANGED => "CKR_KEY_CHANGED",
            .KEY_NEEDED => "CKR_KEY_NEEDED",
            .KEY_INDIGESTIBLE => "CKR_KEY_INDIGESTIBLE",
            .KEY_FUNCTION_NOT_PERMITTED => "CKR_KEY_FUNCTION_NOT_PERMITTED",
            .KEY_NOT_WRAPPABLE => "CKR_KEY_NOT_WRAPPABLE",
            .KEY_UNEXTRACTABLE => "CKR_KEY_UNEXTRACTABLE",
            .MECHANISM_INVALID => "CKR_MECHANISM_INVALID",
            .MECHANISM_PARAM_INVALID => "CKR_MECHANISM_PARAM_INVALID",
            .OBJECT_HANDLE_INVALID => "CKR_OBJECT_HANDLE_INVALID",
            .OPERATION_ACTIVE => "CKR_OPERATION_ACTIVE",
            .OPERATION_NOT_INITIALIZED => "CKR_OPERATION_NOT_INITIALIZED",
            .PIN_INCORRECT => "CKR_PIN_INCORRECT",
            .PIN_INVALID => "CKR_PIN_INVALID",
            .PIN_LEN_RANGE => "CKR_PIN_LEN_RANGE",
            .PIN_EXPIRED => "CKR_PIN_EXPIRED",
            .PIN_LOCKED => "CKR_PIN_LOCKED",
            .SESSION_CLOSED => "CKR_SESSION_CLOSED",
            .SESSION_COUNT => "CKR_SESSION_COUNT",
            .SESSION_HANDLE_INVALID => "CKR_SESSION_HANDLE_INVALID",
            .SESSION_PARALLEL_NOT_SUPPORTED => "CKR_SESSION_PARALLEL_NOT_SUPPORTED",
            .SESSION_READ_ONLY => "CKR_SESSION_READ_ONLY",
            .SESSION_EXISTS => "CKR_SESSION_EXISTS",
            .SESSION_READ_ONLY_EXISTS => "CKR_SESSION_READ_ONLY_EXISTS",
            .SESSION_READ_WRITE_SO_EXISTS => "CKR_SESSION_READ_WRITE_SO_EXISTS",
            .SIGNATURE_INVALID => "CKR_SIGNATURE_INVALID",
            .SIGNATURE_LEN_RANGE => "CKR_SIGNATURE_LEN_RANGE",
            .TEMPLATE_INCOMPLETE => "CKR_TEMPLATE_INCOMPLETE",
            .TEMPLATE_INCONSISTENT => "CKR_TEMPLATE_INCONSISTENT",
            .TOKEN_NOT_PRESENT => "CKR_TOKEN_NOT_PRESENT",
            .TOKEN_NOT_RECOGNIZED => "CKR_TOKEN_NOT_RECOGNIZED",
            .TOKEN_WRITE_PROTECTED => "CKR_TOKEN_WRITE_PROTECTED",
            .UNWRAPPING_KEY_HANDLE_INVALID => "CKR_UNWRAPPING_KEY_HANDLE_INVALID",
            .UNWRAPPING_KEY_SIZE_RANGE => "CKR_UNWRAPPING_KEY_SIZE_RANGE",
            .UNWRAPPING_KEY_TYPE_INCONSISTENT => "CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT",
            .USER_ALREADY_LOGGED_IN => "CKR_USER_ALREADY_LOGGED_IN",
            .USER_NOT_LOGGED_IN => "CKR_USER_NOT_LOGGED_IN",
            .USER_PIN_NOT_INITIALIZED => "CKR_USER_PIN_NOT_INITIALIZED",
            .USER_TYPE_INVALID => "CKR_USER_TYPE_INVALID",
            .USER_ANOTHER_ALREADY_LOGGED_IN => "CKR_USER_ANOTHER_ALREADY_LOGGED_IN",
            .USER_TOO_MANY_TYPES => "CKR_USER_TOO_MANY_TYPES",
            .WRAPPED_KEY_INVALID => "CKR_WRAPPED_KEY_INVALID",
            .WRAPPED_KEY_LEN_RANGE => "CKR_WRAPPED_KEY_LEN_RANGE",
            .WRAPPING_KEY_HANDLE_INVALID => "CKR_WRAPPING_KEY_HANDLE_INVALID",
            .WRAPPING_KEY_SIZE_RANGE => "CKR_WRAPPING_KEY_SIZE_RANGE",
            .WRAPPING_KEY_TYPE_INCONSISTENT => "CKR_WRAPPING_KEY_TYPE_INCONSISTENT",
            .RANDOM_SEED_NOT_SUPPORTED => "CKR_RANDOM_SEED_NOT_SUPPORTED",
            .RANDOM_NO_RNG => "CKR_RANDOM_NO_RNG",
            .DOMAIN_PARAMS_INVALID => "CKR_DOMAIN_PARAMS_INVALID",
            .CURVE_NOT_SUPPORTED => "CKR_CURVE_NOT_SUPPORTED",
            .BUFFER_TOO_SMALL => "CKR_BUFFER_TOO_SMALL",
            .SAVED_STATE_INVALID => "CKR_SAVED_STATE_INVALID",
            .INFORMATION_SENSITIVE => "CKR_INFORMATION_SENSITIVE",
            .STATE_UNSAVEABLE => "CKR_STATE_UNSAVEABLE",
            .CRYPTOKI_NOT_INITIALIZED => "CKR_CRYPTOKI_NOT_INITIALIZED",
            .CRYPTOKI_ALREADY_INITIALIZED => "CKR_CRYPTOKI_ALREADY_INITIALIZED",
            .MUTEX_BAD => "CKR_MUTEX_BAD",
            .MUTEX_NOT_LOCKED => "CKR_MUTEX_NOT_LOCKED",
            .NEW_PIN_MODE => "CKR_NEW_PIN_MODE",
            .NEXT_OTP => "CKR_NEXT_OTP",
            .EXCEEDED_MAX_ITERATIONS => "CKR_EXCEEDED_MAX_ITERATIONS",
            .FIPS_SELF_TEST_FAILED => "CKR_FIPS_SELF_TEST_FAILED",
            .LIBRARY_LOAD_FAILED => "CKR_LIBRARY_LOAD_FAILED",
            .PIN_TOO_WEAK => "CKR_PIN_TOO_WEAK",
            .PUBLIC_KEY_INVALID => "CKR_PUBLIC_KEY_INVALID",
            .FUNCTION_REJECTED => "CKR_FUNCTION_REJECTED",
            .VENDOR_DEFINED => "CKR_VENDOR_DEFINED",
        };

        return value;
    }
};
