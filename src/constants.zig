const C = @import("pkcs11.zig").C;

pub const Error = error{
    // PKCS#11 Errors
    Cancel,
    HostMemory,
    SlotIdInvalid,
    GeneralError,
    FunctionFailed,
    ArgumentsBad,
    NoEvent,
    NeedToCreateThreads,
    CantLock,
    AttributeReadOnly,
    AttributeSensitive,
    AttributeTypeInvalid,
    AttributeValueInvalid,
    ActionProhibited,
    DataInvalid,
    DataLenRange,
    DeviceError,
    DeviceMemory,
    DeviceRemoved,
    EncryptedDataInvalid,
    EncryptedDataLenRange,
    FunctionCancelled,
    FunctionNotParallel,
    FunctionNotSupported,
    KeyHandleInvalid,
    KeySizeRange,
    KeyTypeInconsistent,
    KeyNotNeeded,
    KeyChanged,
    KeyNeeded,
    KeyIndigestible,
    KeyFunctionNotPermitted,
    KeyNotWrappable,
    KeyUnextractable,
    MechanismInvalid,
    MechanismParamInvalid,
    ObjectHandleInvalid,
    OperationActive,
    OperationNotInitialized,
    PINIncorrect,
    PINInvalid,
    PINLenRange,
    PINExpired,
    PINLocked,
    SessionClosed,
    SessionCount,
    SessionHandleInvalid,
    SessionParallelNotSupported,
    SessionReadOnly,
    SessionExists,
    SessionReadOnlyExists,
    SessionReadWriteSOExists,
    SignatureInvalid,
    SignatureLenRange,
    TemplateIncomplete,
    TemplateInconsistent,
    TokenNotPresent,
    TokenNotRecognized,
    TokenWriteProhibited,
    UnwrappingKeyHandleInvalid,
    UnwrappingKeySizeRange,
    UnwrappingKeyTypeInconsistent,
    UserAlreadyLoggedIn,
    UserNotLoggedIn,
    UserPINNotInitialized,
    UserTypeInvalid,
    UserAnotherAlreadyLoggedIn,
    UserTooManyTypes,
    WrappedKeyInvalid,
    WrappedKeyLenRange,
    WrappingKeyHandleInvalid,
    WrappingKeySizeRange,
    WrappingKeyTypeInconsistent,
    RandomSeedNotSupported,
    RandomNoRNG,
    DomainParamsInvalid,
    CurveNotSupported,
    BufferTooSmall,
    SavedStateInvalid,
    InformationSensitive,
    StateUnsavable,
    CryptokiNotInitialized,
    CryptokiAlreadyInitialized,
    MutexBad,
    MutexNotLocked,
    NewPINMode,
    NextOTP,
    ExceededMaxIterations,
    FIPSSelfTestFailed,
    LibraryLoadFailed,
    PINTooWeak,
    PublicKeyInvalid,
    FunctionRejected,
    // Our own errors
    Unknown,
    OutOfMemory,
};

pub const ReturnValue = enum(c_ulong) {
    ok = C.CKR_OK,
    cancel = C.CKR_CANCEL,
    host_memory = C.CKR_HOST_MEMORY,
    slot_id_invalid = C.CKR_SLOT_ID_INVALID,
    general_error = C.CKR_GENERAL_ERROR,
    function_failed = C.CKR_FUNCTION_FAILED,
    arguments_bad = C.CKR_ARGUMENTS_BAD,
    no_event = C.CKR_NO_EVENT,
    need_to_create_threads = C.CKR_NEED_TO_CREATE_THREADS,
    cant_lock = C.CKR_CANT_LOCK,
    attribute_read_only = C.CKR_ATTRIBUTE_READ_ONLY,
    attribute_sensitive = C.CKR_ATTRIBUTE_SENSITIVE,
    attribute_type_invalid = C.CKR_ATTRIBUTE_TYPE_INVALID,
    attribute_value_invalid = C.CKR_ATTRIBUTE_VALUE_INVALID,
    action_prohibited = C.CKR_ACTION_PROHIBITED,
    data_invalid = C.CKR_DATA_INVALID,
    data_len_range = C.CKR_DATA_LEN_RANGE,
    device_error = C.CKR_DEVICE_ERROR,
    device_memory = C.CKR_DEVICE_MEMORY,
    device_removed = C.CKR_DEVICE_REMOVED,
    encrypted_data_invalid = C.CKR_ENCRYPTED_DATA_INVALID,
    encrypted_data_len_range = C.CKR_ENCRYPTED_DATA_LEN_RANGE,
    function_canceled = C.CKR_FUNCTION_CANCELED,
    function_not_parallel = C.CKR_FUNCTION_NOT_PARALLEL,
    function_not_supported = C.CKR_FUNCTION_NOT_SUPPORTED,
    key_handle_invalid = C.CKR_KEY_HANDLE_INVALID,
    key_size_range = C.CKR_KEY_SIZE_RANGE,
    key_type_inconsistent = C.CKR_KEY_TYPE_INCONSISTENT,
    key_not_needed = C.CKR_KEY_NOT_NEEDED,
    key_changed = C.CKR_KEY_CHANGED,
    key_needed = C.CKR_KEY_NEEDED,
    key_indigestible = C.CKR_KEY_INDIGESTIBLE,
    key_function_not_permitted = C.CKR_KEY_FUNCTION_NOT_PERMITTED,
    key_not_wrappable = C.CKR_KEY_NOT_WRAPPABLE,
    key_unextractable = C.CKR_KEY_UNEXTRACTABLE,
    mechanism_invalid = C.CKR_MECHANISM_INVALID,
    mechanism_param_invalid = C.CKR_MECHANISM_PARAM_INVALID,
    object_handle_invalid = C.CKR_OBJECT_HANDLE_INVALID,
    operation_active = C.CKR_OPERATION_ACTIVE,
    operation_not_initialized = C.CKR_OPERATION_NOT_INITIALIZED,
    pin_incorrect = C.CKR_PIN_INCORRECT,
    pin_invalid = C.CKR_PIN_INVALID,
    pin_len_range = C.CKR_PIN_LEN_RANGE,
    pin_expired = C.CKR_PIN_EXPIRED,
    pin_locked = C.CKR_PIN_LOCKED,
    session_closed = C.CKR_SESSION_CLOSED,
    session_count = C.CKR_SESSION_COUNT,
    session_handle_invalid = C.CKR_SESSION_HANDLE_INVALID,
    session_parallel_not_supported = C.CKR_SESSION_PARALLEL_NOT_SUPPORTED,
    session_read_only = C.CKR_SESSION_READ_ONLY,
    session_exists = C.CKR_SESSION_EXISTS,
    session_read_only_exists = C.CKR_SESSION_READ_ONLY_EXISTS,
    session_read_write_so_exists = C.CKR_SESSION_READ_WRITE_SO_EXISTS,
    signature_invalid = C.CKR_SIGNATURE_INVALID,
    signature_len_range = C.CKR_SIGNATURE_LEN_RANGE,
    template_incomplete = C.CKR_TEMPLATE_INCOMPLETE,
    template_inconsistent = C.CKR_TEMPLATE_INCONSISTENT,
    token_not_present = C.CKR_TOKEN_NOT_PRESENT,
    token_not_recognized = C.CKR_TOKEN_NOT_RECOGNIZED,
    token_write_protected = C.CKR_TOKEN_WRITE_PROTECTED,
    unwrapping_key_handle_invalid = C.CKR_UNWRAPPING_KEY_HANDLE_INVALID,
    unwrapping_key_size_range = C.CKR_UNWRAPPING_KEY_SIZE_RANGE,
    unwrapping_key_type_inconsistent = C.CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT,
    user_already_logged_in = C.CKR_USER_ALREADY_LOGGED_IN,
    user_not_logged_in = C.CKR_USER_NOT_LOGGED_IN,
    user_pin_not_initialized = C.CKR_USER_PIN_NOT_INITIALIZED,
    user_type_invalid = C.CKR_USER_TYPE_INVALID,
    user_another_already_logged_in = C.CKR_USER_ANOTHER_ALREADY_LOGGED_IN,
    user_too_many_types = C.CKR_USER_TOO_MANY_TYPES,
    wrapped_key_invalid = C.CKR_WRAPPED_KEY_INVALID,
    wrapped_key_len_range = C.CKR_WRAPPED_KEY_LEN_RANGE,
    wrapping_key_handle_invalid = C.CKR_WRAPPING_KEY_HANDLE_INVALID,
    wrapping_key_size_range = C.CKR_WRAPPING_KEY_SIZE_RANGE,
    wrapping_key_type_inconsistent = C.CKR_WRAPPING_KEY_TYPE_INCONSISTENT,
    random_seed_not_supported = C.CKR_RANDOM_SEED_NOT_SUPPORTED,
    random_no_rng = C.CKR_RANDOM_NO_RNG,
    domain_params_invalid = C.CKR_DOMAIN_PARAMS_INVALID,
    curve_not_supported = C.CKR_CURVE_NOT_SUPPORTED,
    buffer_too_small = C.CKR_BUFFER_TOO_SMALL,
    saved_state_invalid = C.CKR_SAVED_STATE_INVALID,
    information_sensitive = C.CKR_INFORMATION_SENSITIVE,
    state_unsaveable = C.CKR_STATE_UNSAVEABLE,
    cryptoki_not_initialized = C.CKR_CRYPTOKI_NOT_INITIALIZED,
    cryptoki_already_initialized = C.CKR_CRYPTOKI_ALREADY_INITIALIZED,
    mutex_bad = C.CKR_MUTEX_BAD,
    mutex_not_locked = C.CKR_MUTEX_NOT_LOCKED,
    new_pin_mode = C.CKR_NEW_PIN_MODE,
    next_otp = C.CKR_NEXT_OTP,
    exceeded_max_iterations = C.CKR_EXCEEDED_MAX_ITERATIONS,
    fips_self_test_failed = C.CKR_FIPS_SELF_TEST_FAILED,
    library_load_failed = C.CKR_LIBRARY_LOAD_FAILED,
    pin_too_weak = C.CKR_PIN_TOO_WEAK,
    public_key_invalid = C.CKR_PUBLIC_KEY_INVALID,
    function_rejected = C.CKR_FUNCTION_REJECTED,

    pub fn toError(self: ReturnValue) Error {
        return switch (self) {
            .cancel => Error.Cancel,
            .host_memory => Error.HostMemory,
            .slot_id_invalid => Error.SlotIdInvalid,
            .general_error => Error.GeneralError,
            .function_failed => Error.FunctionFailed,
            .arguments_bad => Error.ArgumentsBad,
            .no_event => Error.NoEvent,
            .need_to_create_threads => Error.NeedToCreateThreads,
            .cant_lock => Error.CantLock,
            .attribute_read_only => Error.AttributeReadOnly,
            .attribute_sensitive => Error.AttributeSensitive,
            .attribute_type_invalid => Error.AttributeTypeInvalid,
            .attribute_value_invalid => Error.AttributeValueInvalid,
            .action_prohibited => Error.ActionProhibited,
            .data_invalid => Error.DataInvalid,
            .data_len_range => Error.DataLenRange,
            .device_error => Error.DeviceError,
            .device_memory => Error.DeviceMemory,
            .device_removed => Error.DeviceRemoved,
            .encrypted_data_invalid => Error.EncryptedDataInvalid,
            .encrypted_data_len_range => Error.EncryptedDataLenRange,
            .function_canceled => Error.FunctionCancelled,
            .function_not_parallel => Error.FunctionNotParallel,
            .function_not_supported => Error.FunctionNotSupported,
            .key_handle_invalid => Error.KeyHandleInvalid,
            .key_size_range => Error.KeySizeRange,
            .key_type_inconsistent => Error.KeyTypeInconsistent,
            .key_not_needed => Error.KeyNotNeeded,
            .key_changed => Error.KeyChanged,
            .key_needed => Error.KeyNeeded,
            .key_indigestible => Error.KeyIndigestible,
            .key_function_not_permitted => Error.KeyFunctionNotPermitted,
            .key_not_wrappable => Error.KeyNotWrappable,
            .key_unextractable => Error.KeyUnextractable,
            .mechanism_invalid => Error.MechanismInvalid,
            .mechanism_param_invalid => Error.MechanismParamInvalid,
            .object_handle_invalid => Error.ObjectHandleInvalid,
            .operation_active => Error.OperationActive,
            .operation_not_initialized => Error.OperationNotInitialized,
            .pin_incorrect => Error.PINIncorrect,
            .pin_invalid => Error.PINInvalid,
            .pin_len_range => Error.PINLenRange,
            .pin_expired => Error.PINExpired,
            .pin_locked => Error.PINLocked,
            .session_closed => Error.SessionClosed,
            .session_count => Error.SessionCount,
            .session_handle_invalid => Error.SessionHandleInvalid,
            .session_parallel_not_supported => Error.SessionParallelNotSupported,
            .session_read_only => Error.SessionReadOnly,
            .session_exists => Error.SessionExists,
            .session_read_only_exists => Error.SessionReadOnlyExists,
            .session_read_write_so_exists => Error.SessionReadWriteSOExists,
            .signature_invalid => Error.SignatureInvalid,
            .signature_len_range => Error.SignatureLenRange,
            .template_incomplete => Error.TemplateIncomplete,
            .template_inconsistent => Error.TemplateInconsistent,
            .token_not_present => Error.TokenNotPresent,
            .token_not_recognized => Error.TokenNotRecognized,
            .token_write_protected => Error.TokenWriteProhibited,
            .unwrapping_key_handle_invalid => Error.UnwrappingKeyHandleInvalid,
            .unwrapping_key_size_range => Error.UnwrappingKeySizeRange,
            .unwrapping_key_type_inconsistent => Error.UnwrappingKeyTypeInconsistent,
            .user_already_logged_in => Error.UserAlreadyLoggedIn,
            .user_not_logged_in => Error.UserNotLoggedIn,
            .user_pin_not_initialized => Error.UserPINNotInitialized,
            .user_type_invalid => Error.UserTypeInvalid,
            .user_another_already_logged_in => Error.UserAnotherAlreadyLoggedIn,
            .user_too_many_types => Error.UserTooManyTypes,
            .wrapped_key_invalid => Error.WrappedKeyInvalid,
            .wrapped_key_len_range => Error.WrappedKeyLenRange,
            .wrapping_key_handle_invalid => Error.WrappingKeyHandleInvalid,
            .wrapping_key_size_range => Error.WrappingKeySizeRange,
            .wrapping_key_type_inconsistent => Error.WrappingKeyTypeInconsistent,
            .random_seed_not_supported => Error.RandomSeedNotSupported,
            .random_no_rng => Error.RandomNoRNG,
            .domain_params_invalid => Error.DomainParamsInvalid,
            .curve_not_supported => Error.CurveNotSupported,
            .buffer_too_small => Error.BufferTooSmall,
            .saved_state_invalid => Error.SavedStateInvalid,
            .information_sensitive => Error.InformationSensitive,
            .state_unsaveable => Error.StateUnsavable,
            .cryptoki_not_initialized => Error.CryptokiNotInitialized,
            .cryptoki_already_initialized => Error.CryptokiAlreadyInitialized,
            .mutex_bad => Error.MutexBad,
            .mutex_not_locked => Error.MutexNotLocked,
            .new_pin_mode => Error.NewPINMode,
            .next_otp => Error.NextOTP,
            .exceeded_max_iterations => Error.ExceededMaxIterations,
            .fips_self_test_failed => Error.FIPSSelfTestFailed,
            .library_load_failed => Error.LibraryLoadFailed,
            .pin_too_weak => Error.PINTooWeak,
            .public_key_invalid => Error.PublicKeyInvalid,
            .function_rejected => Error.FunctionRejected,
            else => Error.Unknown,
        };
    }
};

fn returnValueToError(rv: ReturnValue) Error {
    return switch (rv) {
        .cancel => Error.Cancel,
        .host_memory => Error.HostMemory,
        .slot_id_invalid => Error.SlotIdInvalid,
        .general_error => Error.GeneralError,
        .function_failed => Error.FunctionFailed,
        .arguments_bad => Error.ArgumentsBad,
        .no_event => Error.NoEvent,
        .need_to_create_threads => Error.NeedToCreateThreads,
        .cant_lock => Error.CantLock,
        .attribute_read_only => Error.AttributeReadOnly,
        .attribute_sensitive => Error.AttributeSensitive,
        .attribute_type_invalid => Error.AttributeTypeInvalid,
        .attribute_value_invalid => Error.AttributeValueInvalid,
        .action_prohibited => Error.ActionProhibited,
        .data_invalid => Error.DataInvalid,
        .data_len_range => Error.DataLenRange,
        .device_error => Error.DeviceError,
        .device_memory => Error.DeviceMemory,
        .device_removed => Error.DeviceRemoved,
        .encrypted_data_invalid => Error.EncryptedDataInvalid,
        .encrypted_data_len_range => Error.EncryptedDataLenRange,
        .function_canceled => Error.FunctionCancelled,
        .function_not_parallel => Error.FunctionNotParallel,
        .function_not_supported => Error.FunctionNotSupported,
        .key_handle_invalid => Error.KeyHandleInvalid,
        .key_size_range => Error.KeySizeRange,
        .key_type_inconsistent => Error.KeyTypeInconsistent,
        .key_not_needed => Error.KeyNotNeeded,
        .key_changed => Error.KeyChanged,
        .key_needed => Error.KeyNeeded,
        .key_indigestible => Error.KeyIndigestible,
        .key_function_not_permitted => Error.KeyFunctionNotPermitted,
        .key_not_wrappable => Error.KeyNotWrappable,
        .key_unextractable => Error.KeyUnextractable,
        .mechanism_invalid => Error.MechanismInvalid,
        .mechanism_param_invalid => Error.MechanismParamInvalid,
        .object_handle_invalid => Error.ObjectHandleInvalid,
        .operation_active => Error.OperationActive,
        .operation_not_initialized => Error.OperationNotInitialized,
        .pin_incorrect => Error.PINIncorrect,
        .pin_invalid => Error.PINInvalid,
        .pin_len_range => Error.PINLenRange,
        .pin_expired => Error.PINExpired,
        .pin_locked => Error.PINLocked,
        .session_closed => Error.SessionClosed,
        .session_count => Error.SessionCount,
        .session_handle_invalid => Error.SessionHandleInvalid,
        .session_parallel_not_supported => Error.SessionParallelNotSupported,
        .session_read_only => Error.SessionReadOnly,
        .session_exists => Error.SessionExists,
        .session_read_only_exists => Error.SessionReadOnlyExists,
        .session_read_write_so_exists => Error.SessionReadWriteSOExists,
        .signature_invalid => Error.SignatureInvalid,
        .signature_len_range => Error.SignatureLenRange,
        .template_incomplete => Error.TemplateIncomplete,
        .template_inconsistent => Error.TemplateInconsistent,
        .token_not_present => Error.TokenNotPresent,
        .token_not_recognized => Error.TokenNotRecognized,
        .token_write_protected => Error.TokenWriteProhibited,
        .unwrapping_key_handle_invalid => Error.UnwrappingKeyHandleInvalid,
        .unwrapping_key_size_range => Error.UnwrappingKeySizeRange,
        .unwrapping_key_type_inconsistent => Error.UnwrappingKeyTypeInconsistent,
        .user_already_logged_in => Error.UserAlreadyLoggedIn,
        .user_not_logged_in => Error.UserNotLoggedIn,
        .user_pin_not_initialized => Error.UserPINNotInitialized,
        .user_type_invalid => Error.UserTypeInvalid,
        .user_another_already_logged_in => Error.UserAnotherAlreadyLoggedIn,
        .user_too_many_types => Error.UserTooManyTypes,
        .wrapped_key_invalid => Error.WrappedKeyInvalid,
        .wrapped_key_len_range => Error.WrappedKeyLenRange,
        .wrapping_key_handle_invalid => Error.WrappingKeyHandleInvalid,
        .wrapping_key_size_range => Error.WrappingKeySizeRange,
        .wrapping_key_type_inconsistent => Error.WrappingKeyTypeInconsistent,
        .random_seed_not_supported => Error.RandomSeedNotSupported,
        .random_no_rng => Error.RandomNoRNG,
        .domain_params_invalid => Error.DomainParamsInvalid,
        .curve_not_supported => Error.CurveNotSupported,
        .buffer_too_small => Error.BufferTooSmall,
        .saved_state_invalid => Error.SavedStateInvalid,
        .information_sensitive => Error.InformationSensitive,
        .state_unsaveable => Error.StateUnsavable,
        .cryptoki_not_initialized => Error.CryptokiNotInitialized,
        .cryptoki_already_initialized => Error.CryptokiAlreadyInitialized,
        .mutex_bad => Error.MutexBad,
        .mutex_not_locked => Error.MutexNotLocked,
        .new_pin_mode => Error.NewPINMode,
        .next_otp => Error.NextOTP,
        .exceeded_max_iterations => Error.ExceededMaxIterations,
        .fips_self_test_failed => Error.FIPSSelfTestFailed,
        .library_load_failed => Error.LibraryLoadFailed,
        .pin_too_weak => Error.PINTooWeak,
        .public_key_invalid => Error.PublicKeyInvalid,
        .function_rejected => Error.FunctionRejected,
        else => Error.Unknown,
    };
}

pub const MechanismType = enum(c_ulong) {
    rsa_pkcs_key_pair_gen = C.CKM_RSA_PKCS_KEY_PAIR_GEN,
    rsa_pkcs = C.CKM_RSA_PKCS,
    rsa_9796 = C.CKM_RSA_9796,
    rsa_x509 = C.CKM_RSA_X_509,
    md2_rsa_pkcs = C.CKM_MD2_RSA_PKCS,
    md5_rsa_pkcs = C.CKM_MD5_RSA_PKCS,
    sha1_rsa_pkcs = C.CKM_SHA1_RSA_PKCS,
    ripemd128_rsa_pkcs = C.CKM_RIPEMD128_RSA_PKCS,
    ripemd160_rsa_pkcs = C.CKM_RIPEMD160_RSA_PKCS,
    rsa_pkcs_oaep = C.CKM_RSA_PKCS_OAEP,
    rsa_x9_31_key_pair_gen = C.CKM_RSA_X9_31_KEY_PAIR_GEN,
    rsa_x9_31 = C.CKM_RSA_X9_31,
    sha1_rsa_x9_31 = C.CKM_SHA1_RSA_X9_31,
    rsa_pkcs_pss = C.CKM_RSA_PKCS_PSS,
    sha1_rsa_pkcs_pss = C.CKM_SHA1_RSA_PKCS_PSS,
    dsa_key_pair_gen = C.CKM_DSA_KEY_PAIR_GEN,
    dsa = C.CKM_DSA,
    dsa_sha1 = C.CKM_DSA_SHA1,
    dsa_sha224 = C.CKM_DSA_SHA224,
    dsa_sha256 = C.CKM_DSA_SHA256,
    dsa_sha384 = C.CKM_DSA_SHA384,
    dsa_sha512 = C.CKM_DSA_SHA512,
    dh_pkcs_key_pair_gen = C.CKM_DH_PKCS_KEY_PAIR_GEN,
    dh_pkcs_derive = C.CKM_DH_PKCS_DERIVE,
    x9_42_dh_key_pair_gen = C.CKM_X9_42_DH_KEY_PAIR_GEN,
    x9_42_dh_derive = C.CKM_X9_42_DH_DERIVE,
    x9_42_dh_hybrid_derive = C.CKM_X9_42_DH_HYBRID_DERIVE,
    x9_42_mqv_derive = C.CKM_X9_42_MQV_DERIVE,
    sha256_rsa_pkcs = C.CKM_SHA256_RSA_PKCS,
    sha384_rsa_pkcs = C.CKM_SHA384_RSA_PKCS,
    sha512_rsa_pkcs = C.CKM_SHA512_RSA_PKCS,
    sha256_rsa_pkcs_pss = C.CKM_SHA256_RSA_PKCS_PSS,
    sha384_rsa_pkcs_pss = C.CKM_SHA384_RSA_PKCS_PSS,
    sha512_rsa_pkcs_pss = C.CKM_SHA512_RSA_PKCS_PSS,
    sha224_rsa_pkcs = C.CKM_SHA224_RSA_PKCS,
    sha224_rsa_pkcs_pss = C.CKM_SHA224_RSA_PKCS_PSS,
    sha512_224 = C.CKM_SHA512_224,
    sha512_224_hmac = C.CKM_SHA512_224_HMAC,
    sha512_224_hmac_general = C.CKM_SHA512_224_HMAC_GENERAL,
    sha512_224_key_derivation = C.CKM_SHA512_224_KEY_DERIVATION,
    sha512_256 = C.CKM_SHA512_256,
    sha512_256_hmac = C.CKM_SHA512_256_HMAC,
    sha512_256_hmac_general = C.CKM_SHA512_256_HMAC_GENERAL,
    sha512_256_key_derivation = C.CKM_SHA512_256_KEY_DERIVATION,
    sha512_t = C.CKM_SHA512_T,
    sha512_t_hmac = C.CKM_SHA512_T_HMAC,
    sha512_t_hmac_general = C.CKM_SHA512_T_HMAC_GENERAL,
    sha512_t_key_derivation = C.CKM_SHA512_T_KEY_DERIVATION,
    rc2_key_gen = C.CKM_RC2_KEY_GEN,
    rc2_ecb = C.CKM_RC2_ECB,
    rc2_cbc = C.CKM_RC2_CBC,
    rc2_mac = C.CKM_RC2_MAC,
    rc2_mac_general = C.CKM_RC2_MAC_GENERAL,
    rc2_cbc_pad = C.CKM_RC2_CBC_PAD,
    rc4_key_gen = C.CKM_RC4_KEY_GEN,
    rc4 = C.CKM_RC4,
    des_key_gen = C.CKM_DES_KEY_GEN,
    des_ecb = C.CKM_DES_ECB,
    des_cbc = C.CKM_DES_CBC,
    des_mac = C.CKM_DES_MAC,
    des_mac_general = C.CKM_DES_MAC_GENERAL,
    des_cbc_pad = C.CKM_DES_CBC_PAD,
    des2_key_gen = C.CKM_DES2_KEY_GEN,
    des3_key_gen = C.CKM_DES3_KEY_GEN,
    des3_ecb = C.CKM_DES3_ECB,
    des3_cbc = C.CKM_DES3_CBC,
    des3_mac = C.CKM_DES3_MAC,
    des3_mac_general = C.CKM_DES3_MAC_GENERAL,
    des3_cbc_pad = C.CKM_DES3_CBC_PAD,
    des3_cmac_general = C.CKM_DES3_CMAC_GENERAL,
    des3_cmac = C.CKM_DES3_CMAC,
    cdmf_key_gen = C.CKM_CDMF_KEY_GEN,
    cdmf_ecb = C.CKM_CDMF_ECB,
    cdmf_cbc = C.CKM_CDMF_CBC,
    cdmf_mac = C.CKM_CDMF_MAC,
    cdmf_mac_general = C.CKM_CDMF_MAC_GENERAL,
    cdmf_cbc_pad = C.CKM_CDMF_CBC_PAD,
    des_ofb64 = C.CKM_DES_OFB64,
    des_ofb8 = C.CKM_DES_OFB8,
    des_cfb64 = C.CKM_DES_CFB64,
    des_cfb8 = C.CKM_DES_CFB8,
    md2 = C.CKM_MD2,
    md2_hmac = C.CKM_MD2_HMAC,
    md2_hmac_general = C.CKM_MD2_HMAC_GENERAL,
    md5 = C.CKM_MD5,
    md5_hmac = C.CKM_MD5_HMAC,
    md5_hmac_general = C.CKM_MD5_HMAC_GENERAL,
    sha_1 = C.CKM_SHA_1,
    sha_1_hmac = C.CKM_SHA_1_HMAC,
    sha_1_hmac_general = C.CKM_SHA_1_HMAC_GENERAL,
    ripemd128 = C.CKM_RIPEMD128,
    ripemd128_hmac = C.CKM_RIPEMD128_HMAC,
    ripemd128_hmac_general = C.CKM_RIPEMD128_HMAC_GENERAL,
    ripemd160 = C.CKM_RIPEMD160,
    ripemd160_hmac = C.CKM_RIPEMD160_HMAC,
    ripemd160_hmac_general = C.CKM_RIPEMD160_HMAC_GENERAL,
    sha256 = C.CKM_SHA256,
    sha256_hmac = C.CKM_SHA256_HMAC,
    sha256_hmac_general = C.CKM_SHA256_HMAC_GENERAL,
    sha224 = C.CKM_SHA224,
    sha224_hmac = C.CKM_SHA224_HMAC,
    sha224_hmac_general = C.CKM_SHA224_HMAC_GENERAL,
    sha384 = C.CKM_SHA384,
    sha384_hmac = C.CKM_SHA384_HMAC,
    sha384_hmac_general = C.CKM_SHA384_HMAC_GENERAL,
    sha512 = C.CKM_SHA512,
    sha512_hmac = C.CKM_SHA512_HMAC,
    sha512_hmac_general = C.CKM_SHA512_HMAC_GENERAL,
    securid_key_gen = C.CKM_SECURID_KEY_GEN,
    securid = C.CKM_SECURID,
    hotp_key_gen = C.CKM_HOTP_KEY_GEN,
    hotp = C.CKM_HOTP,
    acti = C.CKM_ACTI,
    acti_key_gen = C.CKM_ACTI_KEY_GEN,
    cast_key_gen = C.CKM_CAST_KEY_GEN,
    cast_ecb = C.CKM_CAST_ECB,
    cast_cbc = C.CKM_CAST_CBC,
    cast_mac = C.CKM_CAST_MAC,
    cast_mac_general = C.CKM_CAST_MAC_GENERAL,
    cast_cbc_pad = C.CKM_CAST_CBC_PAD,
    cast3_key_gen = C.CKM_CAST3_KEY_GEN,
    cast3_ecb = C.CKM_CAST3_ECB,
    cast3_cbc = C.CKM_CAST3_CBC,
    cast3_mac = C.CKM_CAST3_MAC,
    cast3_mac_general = C.CKM_CAST3_MAC_GENERAL,
    cast3_cbc_pad = C.CKM_CAST3_CBC_PAD,
    // CAST5 mechanisms omitted intentionally, since CAST-128 is the same thing.
    cast128_key_gen = C.CKM_CAST128_KEY_GEN,
    cast128_ecb = C.CKM_CAST128_ECB,
    cast128_cbc = C.CKM_CAST128_CBC,
    cast128_mac = C.CKM_CAST128_MAC,
    cast128_mac_general = C.CKM_CAST128_MAC_GENERAL,
    cast128_cbc_pad = C.CKM_CAST128_CBC_PAD,
    rc5_key_gen = C.CKM_RC5_KEY_GEN,
    rc5_ecb = C.CKM_RC5_ECB,
    rc5_cbc = C.CKM_RC5_CBC,
    rc5_mac = C.CKM_RC5_MAC,
    rc5_mac_general = C.CKM_RC5_MAC_GENERAL,
    rc5_cbc_pad = C.CKM_RC5_CBC_PAD,
    idea_key_gen = C.CKM_IDEA_KEY_GEN,
    idea_ecb = C.CKM_IDEA_ECB,
    idea_cbc = C.CKM_IDEA_CBC,
    idea_mac = C.CKM_IDEA_MAC,
    idea_mac_general = C.CKM_IDEA_MAC_GENERAL,
    idea_cbc_pad = C.CKM_IDEA_CBC_PAD,
    generic_secret_key_gen = C.CKM_GENERIC_SECRET_KEY_GEN,
    concatenate_base_and_key = C.CKM_CONCATENATE_BASE_AND_KEY,
    concatenate_base_and_data = C.CKM_CONCATENATE_BASE_AND_DATA,
    concatenate_data_and_base = C.CKM_CONCATENATE_DATA_AND_BASE,
    xor_base_and_data = C.CKM_XOR_BASE_AND_DATA,
    extract_key_from_key = C.CKM_EXTRACT_KEY_FROM_KEY,
    ssl3_pre_master_key_gen = C.CKM_SSL3_PRE_MASTER_KEY_GEN,
    ssl3_master_key_derive = C.CKM_SSL3_MASTER_KEY_DERIVE,
    ssl3_key_and_mac_derive = C.CKM_SSL3_KEY_AND_MAC_DERIVE,
    ssl3_master_key_derive_dh = C.CKM_SSL3_MASTER_KEY_DERIVE_DH,
    tls_pre_master_key_gen = C.CKM_TLS_PRE_MASTER_KEY_GEN,
    tls_master_key_derive = C.CKM_TLS_MASTER_KEY_DERIVE,
    tls_key_and_mac_derive = C.CKM_TLS_KEY_AND_MAC_DERIVE,
    tls_master_key_derive_dh = C.CKM_TLS_MASTER_KEY_DERIVE_DH,
    tls_prf = C.CKM_TLS_PRF,
    ssl3_md5_mac = C.CKM_SSL3_MD5_MAC,
    ssl3_sha1_mac = C.CKM_SSL3_SHA1_MAC,
    md5_key_derivation = C.CKM_MD5_KEY_DERIVATION,
    md2_key_derivation = C.CKM_MD2_KEY_DERIVATION,
    sha1_key_derivation = C.CKM_SHA1_KEY_DERIVATION,
    sha256_key_derivation = C.CKM_SHA256_KEY_DERIVATION,
    sha384_key_derivation = C.CKM_SHA384_KEY_DERIVATION,
    sha512_key_derivation = C.CKM_SHA512_KEY_DERIVATION,
    sha224_key_derivation = C.CKM_SHA224_KEY_DERIVATION,
    pbe_md2_des_cbc = C.CKM_PBE_MD2_DES_CBC,
    pbe_md5_des_cbc = C.CKM_PBE_MD5_DES_CBC,
    pbe_md5_cast_cbc = C.CKM_PBE_MD5_CAST_CBC,
    pbe_md5_cast3_cbc = C.CKM_PBE_MD5_CAST3_CBC,
    // CAST5 mechanisms omitted intentionally, since CAST-128 is the same thing.
    pbe_md5_cast128_cbc = C.CKM_PBE_MD5_CAST128_CBC,
    pbe_sha1_cast128_cbc = C.CKM_PBE_SHA1_CAST128_CBC,
    pbe_sha1_rc4_128 = C.CKM_PBE_SHA1_RC4_128,
    pbe_sha1_rc4_40 = C.CKM_PBE_SHA1_RC4_40,
    pbe_sha1_des3_ede_cbc = C.CKM_PBE_SHA1_DES3_EDE_CBC,
    pbe_sha1_des2_ede_cbc = C.CKM_PBE_SHA1_DES2_EDE_CBC,
    pbe_sha1_rc2_128_cbc = C.CKM_PBE_SHA1_RC2_128_CBC,
    pbe_sha1_rc2_40_cbc = C.CKM_PBE_SHA1_RC2_40_CBC,
    pkcs5_pbkd2 = C.CKM_PKCS5_PBKD2,
    pba_sha1_with_sha1_hmac = C.CKM_PBA_SHA1_WITH_SHA1_HMAC,
    wtls_pre_master_key_gen = C.CKM_WTLS_PRE_MASTER_KEY_GEN,
    wtls_master_key_derive = C.CKM_WTLS_MASTER_KEY_DERIVE,
    wtls_master_key_derive_dh_ecc = C.CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC,
    wtls_prf = C.CKM_WTLS_PRF,
    wtls_server_key_and_mac_derive = C.CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE,
    wtls_client_key_and_mac_derive = C.CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE,
    tls10_mac_server = C.CKM_TLS10_MAC_SERVER,
    tls10_mac_client = C.CKM_TLS10_MAC_CLIENT,
    tls12_mac = C.CKM_TLS12_MAC,
    tls12_kdf = C.CKM_TLS12_KDF,
    tls12_master_key_derive = C.CKM_TLS12_MASTER_KEY_DERIVE,
    tls12_key_and_mac_derive = C.CKM_TLS12_KEY_AND_MAC_DERIVE,
    tls12_master_key_derive_dh = C.CKM_TLS12_MASTER_KEY_DERIVE_DH,
    tls12_key_safe_derive = C.CKM_TLS12_KEY_SAFE_DERIVE,
    tls_mac = C.CKM_TLS_MAC,
    tls_kdf = C.CKM_TLS_KDF,
    key_wrap_lynks = C.CKM_KEY_WRAP_LYNKS,
    key_wrap_set_oaep = C.CKM_KEY_WRAP_SET_OAEP,
    cms_sig = C.CKM_CMS_SIG,
    kip_derive = C.CKM_KIP_DERIVE,
    kip_wrap = C.CKM_KIP_WRAP,
    kip_mac = C.CKM_KIP_MAC,
    camellia_key_gen = C.CKM_CAMELLIA_KEY_GEN,
    camellia_ecb = C.CKM_CAMELLIA_ECB,
    camellia_cbc = C.CKM_CAMELLIA_CBC,
    camellia_mac = C.CKM_CAMELLIA_MAC,
    camellia_mac_general = C.CKM_CAMELLIA_MAC_GENERAL,
    camellia_cbc_pad = C.CKM_CAMELLIA_CBC_PAD,
    camellia_ecb_encrypt_data = C.CKM_CAMELLIA_ECB_ENCRYPT_DATA,
    camellia_cbc_encrypt_data = C.CKM_CAMELLIA_CBC_ENCRYPT_DATA,
    camellia_ctr = C.CKM_CAMELLIA_CTR,
    aria_key_gen = C.CKM_ARIA_KEY_GEN,
    aria_ecb = C.CKM_ARIA_ECB,
    aria_cbc = C.CKM_ARIA_CBC,
    aria_mac = C.CKM_ARIA_MAC,
    aria_mac_general = C.CKM_ARIA_MAC_GENERAL,
    aria_cbc_pad = C.CKM_ARIA_CBC_PAD,
    aria_ecb_encrypt_data = C.CKM_ARIA_ECB_ENCRYPT_DATA,
    aria_cbc_encrypt_data = C.CKM_ARIA_CBC_ENCRYPT_DATA,
    seed_key_gen = C.CKM_SEED_KEY_GEN,
    seed_ecb = C.CKM_SEED_ECB,
    seed_cbc = C.CKM_SEED_CBC,
    seed_mac = C.CKM_SEED_MAC,
    seed_mac_general = C.CKM_SEED_MAC_GENERAL,
    seed_cbc_pad = C.CKM_SEED_CBC_PAD,
    seed_ecb_encrypt_data = C.CKM_SEED_ECB_ENCRYPT_DATA,
    seed_cbc_encrypt_data = C.CKM_SEED_CBC_ENCRYPT_DATA,
    skipjack_key_gen = C.CKM_SKIPJACK_KEY_GEN,
    skipjack_ecb64 = C.CKM_SKIPJACK_ECB64,
    skipjack_cbc64 = C.CKM_SKIPJACK_CBC64,
    skipjack_ofb64 = C.CKM_SKIPJACK_OFB64,
    skipjack_cfb64 = C.CKM_SKIPJACK_CFB64,
    skipjack_cfb32 = C.CKM_SKIPJACK_CFB32,
    skipjack_cfb16 = C.CKM_SKIPJACK_CFB16,
    skipjack_cfb8 = C.CKM_SKIPJACK_CFB8,
    skipjack_wrap = C.CKM_SKIPJACK_WRAP,
    skipjack_private_wrap = C.CKM_SKIPJACK_PRIVATE_WRAP,
    skipjack_relayx = C.CKM_SKIPJACK_RELAYX,
    kea_key_pair_gen = C.CKM_KEA_KEY_PAIR_GEN,
    kea_key_derive = C.CKM_KEA_KEY_DERIVE,
    kea_derive = C.CKM_KEA_DERIVE,
    fortezza_timestamp = C.CKM_FORTEZZA_TIMESTAMP,
    baton_key_gen = C.CKM_BATON_KEY_GEN,
    baton_ecb128 = C.CKM_BATON_ECB128,
    baton_ecb96 = C.CKM_BATON_ECB96,
    baton_cbc128 = C.CKM_BATON_CBC128,
    baton_counter = C.CKM_BATON_COUNTER,
    baton_shuffle = C.CKM_BATON_SHUFFLE,
    baton_wrap = C.CKM_BATON_WRAP,
    // ommited ecdsa_key_pair_gen (deprecated name conflicts with ec_key_pair_gen)
    ec_key_pair_gen = C.CKM_EC_KEY_PAIR_GEN,
    ecdsa = C.CKM_ECDSA,
    ecdsa_sha1 = C.CKM_ECDSA_SHA1,
    ecdsa_sha224 = C.CKM_ECDSA_SHA224,
    ecdsa_sha256 = C.CKM_ECDSA_SHA256,
    ecdsa_sha384 = C.CKM_ECDSA_SHA384,
    ecdsa_sha512 = C.CKM_ECDSA_SHA512,
    ecdh1_derive = C.CKM_ECDH1_DERIVE,
    ecdh1_cofactor_derive = C.CKM_ECDH1_COFACTOR_DERIVE,
    ecmqv_derive = C.CKM_ECMQV_DERIVE,
    ecdh_aes_key_wrap = C.CKM_ECDH_AES_KEY_WRAP,
    rsa_aes_key_wrap = C.CKM_RSA_AES_KEY_WRAP,
    juniper_key_gen = C.CKM_JUNIPER_KEY_GEN,
    juniper_ecb128 = C.CKM_JUNIPER_ECB128,
    juniper_cbc128 = C.CKM_JUNIPER_CBC128,
    juniper_counter = C.CKM_JUNIPER_COUNTER,
    juniper_shuffle = C.CKM_JUNIPER_SHUFFLE,
    juniper_wrap = C.CKM_JUNIPER_WRAP,
    fasthash = C.CKM_FASTHASH,
    aes_key_gen = C.CKM_AES_KEY_GEN,
    aes_ecb = C.CKM_AES_ECB,
    aes_cbc = C.CKM_AES_CBC,
    aes_mac = C.CKM_AES_MAC,
    aes_mac_general = C.CKM_AES_MAC_GENERAL,
    aes_cbc_pad = C.CKM_AES_CBC_PAD,
    aes_ctr = C.CKM_AES_CTR,
    aes_gcm = C.CKM_AES_GCM,
    aes_ccm = C.CKM_AES_CCM,
    aes_cts = C.CKM_AES_CTS,
    aes_cmac = C.CKM_AES_CMAC,
    aes_cmac_general = C.CKM_AES_CMAC_GENERAL,
    aes_xcbc_mac = C.CKM_AES_XCBC_MAC,
    aes_xcbc_mac_96 = C.CKM_AES_XCBC_MAC_96,
    aes_gmac = C.CKM_AES_GMAC,
    blowfish_key_gen = C.CKM_BLOWFISH_KEY_GEN,
    blowfish_cbc = C.CKM_BLOWFISH_CBC,
    twofish_key_gen = C.CKM_TWOFISH_KEY_GEN,
    twofish_cbc = C.CKM_TWOFISH_CBC,
    blowfish_cbc_pad = C.CKM_BLOWFISH_CBC_PAD,
    twofish_cbc_pad = C.CKM_TWOFISH_CBC_PAD,
    des_ecb_encrypt_data = C.CKM_DES_ECB_ENCRYPT_DATA,
    des_cbc_encrypt_data = C.CKM_DES_CBC_ENCRYPT_DATA,
    des3_ecb_encrypt_data = C.CKM_DES3_ECB_ENCRYPT_DATA,
    des3_cbc_encrypt_data = C.CKM_DES3_CBC_ENCRYPT_DATA,
    aes_ecb_encrypt_data = C.CKM_AES_ECB_ENCRYPT_DATA,
    aes_cbc_encrypt_data = C.CKM_AES_CBC_ENCRYPT_DATA,
    gostr3410_key_pair_gen = C.CKM_GOSTR3410_KEY_PAIR_GEN,
    gostr3410 = C.CKM_GOSTR3410,
    gostr3410_with_gostr3411 = C.CKM_GOSTR3410_WITH_GOSTR3411,
    gostr3410_key_wrap = C.CKM_GOSTR3410_KEY_WRAP,
    gostr3410_derive = C.CKM_GOSTR3410_DERIVE,
    gostr3411 = C.CKM_GOSTR3411,
    gostr3411_hmac = C.CKM_GOSTR3411_HMAC,
    gost28147_key_gen = C.CKM_GOST28147_KEY_GEN,
    gost28147_ecb = C.CKM_GOST28147_ECB,
    gost28147 = C.CKM_GOST28147,
    gost28147_mac = C.CKM_GOST28147_MAC,
    gost28147_key_wrap = C.CKM_GOST28147_KEY_WRAP,
    dsa_parameter_gen = C.CKM_DSA_PARAMETER_GEN,
    dh_pkcs_parameter_gen = C.CKM_DH_PKCS_PARAMETER_GEN,
    x9_42_dh_parameter_gen = C.CKM_X9_42_DH_PARAMETER_GEN,
    dsa_probablistic_parameter_gen = C.CKM_DSA_PROBABLISTIC_PARAMETER_GEN,
    dsa_shawe_taylor_parameter_gen = C.CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN,
    aes_ofb = C.CKM_AES_OFB,
    aes_cfb64 = C.CKM_AES_CFB64,
    aes_cfb8 = C.CKM_AES_CFB8,
    aes_cfb128 = C.CKM_AES_CFB128,
    aes_cfb1 = C.CKM_AES_CFB1,
    aes_key_wrap = C.CKM_AES_KEY_WRAP,
    aes_key_wrap_pad = C.CKM_AES_KEY_WRAP_PAD,
    rsa_pkcs_tpm_1_1 = C.CKM_RSA_PKCS_TPM_1_1,
    rsa_pkcs_oaep_tpm_1_1 = C.CKM_RSA_PKCS_OAEP_TPM_1_1,
    // Some implementations of PKCS#11 back-ported v3 mechanisms to v2.40.... so we do the same to avoid panics.
    ec_edwards_key_pair_gen = 0x00001055,
    eddsa = 0x00001057,
};

pub const UserType = enum(c_ulong) {
    system_operator = C.CKU_SO,
    user = C.CKU_USER,
    context_specific = C.CKU_CONTEXT_SPECIFIC,
};

pub const SessionState = enum(c_ulong) {
    read_only_public = C.CKS_RO_PUBLIC_SESSION,
    read_only_user_functions = C.CKS_RO_USER_FUNCTIONS,
    read_write_public = C.CKS_RW_PUBLIC_SESSION,
    read_write_user_functions = C.CKS_RW_USER_FUNCTIONS,
    read_write_system_operator_functions = C.CKS_RW_SO_FUNCTIONS,
};
