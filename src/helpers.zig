const C = @import("pkcs11.zig").C;
const Error = @import("err.zig").Error;

pub const ReturnValue = enum(c_ulong) {
    ok = C.CKR_OK,
    cancel = C.CKR_CANCEL,
    host_memory = C.CKR_HOST_MEMORY,
    slot_id_invalid = C.CKR_SLOT_ID_INVALID,
    general_error = C.CKR_GENERAL_ERROR,
    function_failed = C.CKR_FUNCTION_FAILED,
    arguments_bad = C.CKR_ARGUMENTS_BAD,
    no_event = C.CKR_NO_EVENT,
    need_to_create_threads = C.CKR_NEED_TO_CREATE_THREADS,
    cant_lock = C.CKR_CANT_LOCK,
    attribute_read_only = C.CKR_ATTRIBUTE_READ_ONLY,
    attribute_sensitive = C.CKR_ATTRIBUTE_SENSITIVE,
    attribute_type_invalid = C.CKR_ATTRIBUTE_TYPE_INVALID,
    attribute_value_invalid = C.CKR_ATTRIBUTE_VALUE_INVALID,
    action_prohibited = C.CKR_ACTION_PROHIBITED,
    data_invalid = C.CKR_DATA_INVALID,
    data_len_range = C.CKR_DATA_LEN_RANGE,
    device_error = C.CKR_DEVICE_ERROR,
    device_memory = C.CKR_DEVICE_MEMORY,
    device_removed = C.CKR_DEVICE_REMOVED,
    encrypted_data_invalid = C.CKR_ENCRYPTED_DATA_INVALID,
    encrypted_data_len_range = C.CKR_ENCRYPTED_DATA_LEN_RANGE,
    function_canceled = C.CKR_FUNCTION_CANCELED,
    function_not_parallel = C.CKR_FUNCTION_NOT_PARALLEL,
    function_not_supported = C.CKR_FUNCTION_NOT_SUPPORTED,
    key_handle_invalid = C.CKR_KEY_HANDLE_INVALID,
    key_size_range = C.CKR_KEY_SIZE_RANGE,
    key_type_inconsistent = C.CKR_KEY_TYPE_INCONSISTENT,
    key_not_needed = C.CKR_KEY_NOT_NEEDED,
    key_changed = C.CKR_KEY_CHANGED,
    key_needed = C.CKR_KEY_NEEDED,
    key_indigestible = C.CKR_KEY_INDIGESTIBLE,
    key_function_not_permitted = C.CKR_KEY_FUNCTION_NOT_PERMITTED,
    key_not_wrappable = C.CKR_KEY_NOT_WRAPPABLE,
    key_unextractable = C.CKR_KEY_UNEXTRACTABLE,
    mechanism_invalid = C.CKR_MECHANISM_INVALID,
    mechanism_param_invalid = C.CKR_MECHANISM_PARAM_INVALID,
    object_handle_invalid = C.CKR_OBJECT_HANDLE_INVALID,
    operation_active = C.CKR_OPERATION_ACTIVE,
    operation_not_initialized = C.CKR_OPERATION_NOT_INITIALIZED,
    pin_incorrect = C.CKR_PIN_INCORRECT,
    pin_invalid = C.CKR_PIN_INVALID,
    pin_len_range = C.CKR_PIN_LEN_RANGE,
    pin_expired = C.CKR_PIN_EXPIRED,
    pin_locked = C.CKR_PIN_LOCKED,
    session_closed = C.CKR_SESSION_CLOSED,
    session_count = C.CKR_SESSION_COUNT,
    session_handle_invalid = C.CKR_SESSION_HANDLE_INVALID,
    session_parallel_not_supported = C.CKR_SESSION_PARALLEL_NOT_SUPPORTED,
    session_read_only = C.CKR_SESSION_READ_ONLY,
    session_exists = C.CKR_SESSION_EXISTS,
    session_read_only_exists = C.CKR_SESSION_READ_ONLY_EXISTS,
    session_read_write_so_exists = C.CKR_SESSION_READ_WRITE_SO_EXISTS,
    signature_invalid = C.CKR_SIGNATURE_INVALID,
    signature_len_range = C.CKR_SIGNATURE_LEN_RANGE,
    template_incomplete = C.CKR_TEMPLATE_INCOMPLETE,
    template_inconsistent = C.CKR_TEMPLATE_INCONSISTENT,
    token_not_present = C.CKR_TOKEN_NOT_PRESENT,
    token_not_recognized = C.CKR_TOKEN_NOT_RECOGNIZED,
    token_write_protected = C.CKR_TOKEN_WRITE_PROTECTED,
    unwrapping_key_handle_invalid = C.CKR_UNWRAPPING_KEY_HANDLE_INVALID,
    unwrapping_key_size_range = C.CKR_UNWRAPPING_KEY_SIZE_RANGE,
    unwrapping_key_type_inconsistent = C.CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT,
    user_already_logged_in = C.CKR_USER_ALREADY_LOGGED_IN,
    user_not_logged_in = C.CKR_USER_NOT_LOGGED_IN,
    user_pin_not_initialized = C.CKR_USER_PIN_NOT_INITIALIZED,
    user_type_invalid = C.CKR_USER_TYPE_INVALID,
    user_another_already_logged_in = C.CKR_USER_ANOTHER_ALREADY_LOGGED_IN,
    user_too_many_types = C.CKR_USER_TOO_MANY_TYPES,
    wrapped_key_invalid = C.CKR_WRAPPED_KEY_INVALID,
    wrapped_key_len_range = C.CKR_WRAPPED_KEY_LEN_RANGE,
    wrapping_key_handle_invalid = C.CKR_WRAPPING_KEY_HANDLE_INVALID,
    wrapping_key_size_range = C.CKR_WRAPPING_KEY_SIZE_RANGE,
    wrapping_key_type_inconsistent = C.CKR_WRAPPING_KEY_TYPE_INCONSISTENT,
    random_seed_not_supported = C.CKR_RANDOM_SEED_NOT_SUPPORTED,
    random_no_rng = C.CKR_RANDOM_NO_RNG,
    domain_params_invalid = C.CKR_DOMAIN_PARAMS_INVALID,
    curve_not_supported = C.CKR_CURVE_NOT_SUPPORTED,
    buffer_too_small = C.CKR_BUFFER_TOO_SMALL,
    saved_state_invalid = C.CKR_SAVED_STATE_INVALID,
    information_sensitive = C.CKR_INFORMATION_SENSITIVE,
    state_unsaveable = C.CKR_STATE_UNSAVEABLE,
    cryptoki_not_initialized = C.CKR_CRYPTOKI_NOT_INITIALIZED,
    cryptoki_already_initialized = C.CKR_CRYPTOKI_ALREADY_INITIALIZED,
    mutex_bad = C.CKR_MUTEX_BAD,
    mutex_not_locked = C.CKR_MUTEX_NOT_LOCKED,
    new_pin_mode = C.CKR_NEW_PIN_MODE,
    next_otp = C.CKR_NEXT_OTP,
    exceeded_max_iterations = C.CKR_EXCEEDED_MAX_ITERATIONS,
    fips_self_test_failed = C.CKR_FIPS_SELF_TEST_FAILED,
    library_load_failed = C.CKR_LIBRARY_LOAD_FAILED,
    pin_too_weak = C.CKR_PIN_TOO_WEAK,
    public_key_invalid = C.CKR_PUBLIC_KEY_INVALID,
    function_rejected = C.CKR_FUNCTION_REJECTED,

    pub fn toError(self: ReturnValue) Error {
        return switch (self) {
            .cancel => Error.Cancel,
            .host_memory => Error.HostMemory,
            .slot_id_invalid => Error.SlotIdInvalid,
            .general_error => Error.GeneralError,
            .function_failed => Error.FunctionFailed,
            .arguments_bad => Error.ArgumentsBad,
            .no_event => Error.NoEvent,
            .need_to_create_threads => Error.NeedToCreateThreads,
            .cant_lock => Error.CantLock,
            .attribute_read_only => Error.AttributeReadOnly,
            .attribute_sensitive => Error.AttributeSensitive,
            .attribute_type_invalid => Error.AttributeTypeInvalid,
            .attribute_value_invalid => Error.AttributeValueInvalid,
            .action_prohibited => Error.ActionProhibited,
            .data_invalid => Error.DataInvalid,
            .data_len_range => Error.DataLenRange,
            .device_error => Error.DeviceError,
            .device_memory => Error.DeviceMemory,
            .device_removed => Error.DeviceRemoved,
            .encrypted_data_invalid => Error.EncryptedDataInvalid,
            .encrypted_data_len_range => Error.EncryptedDataLenRange,
            .function_canceled => Error.FunctionCancelled,
            .function_not_parallel => Error.FunctionNotParallel,
            .function_not_supported => Error.FunctionNotSupported,
            .key_handle_invalid => Error.KeyHandleInvalid,
            .key_size_range => Error.KeySizeRange,
            .key_type_inconsistent => Error.KeyTypeInconsistent,
            .key_not_needed => Error.KeyNotNeeded,
            .key_changed => Error.KeyChanged,
            .key_needed => Error.KeyNeeded,
            .key_indigestible => Error.KeyIndigestible,
            .key_function_not_permitted => Error.KeyFunctionNotPermitted,
            .key_not_wrappable => Error.KeyNotWrappable,
            .key_unextractable => Error.KeyUnextractable,
            .mechanism_invalid => Error.MechanismInvalid,
            .mechanism_param_invalid => Error.MechanismParamInvalid,
            .object_handle_invalid => Error.ObjectHandleInvalid,
            .operation_active => Error.OperationActive,
            .operation_not_initialized => Error.OperationNotInitialized,
            .pin_incorrect => Error.PINIncorrect,
            .pin_invalid => Error.PINInvalid,
            .pin_len_range => Error.PINLenRange,
            .pin_expired => Error.PINExpired,
            .pin_locked => Error.PINLocked,
            .session_closed => Error.SessionClosed,
            .session_count => Error.SessionCount,
            .session_handle_invalid => Error.SessionHandleInvalid,
            .session_parallel_not_supported => Error.SessionParallelNotSupported,
            .session_read_only => Error.SessionReadOnly,
            .session_exists => Error.SessionExists,
            .session_read_only_exists => Error.SessionReadOnlyExists,
            .session_read_write_so_exists => Error.SessionReadWriteSOExists,
            .signature_invalid => Error.SignatureInvalid,
            .signature_len_range => Error.SignatureLenRange,
            .template_incomplete => Error.TemplateIncomplete,
            .template_inconsistent => Error.TemplateInconsistent,
            .token_not_present => Error.TokenNotPresent,
            .token_not_recognized => Error.TokenNotRecognized,
            .token_write_protected => Error.TokenWriteProhibited,
            .unwrapping_key_handle_invalid => Error.UnwrappingKeyHandleInvalid,
            .unwrapping_key_size_range => Error.UnwrappingKeySizeRange,
            .unwrapping_key_type_inconsistent => Error.UnwrappingKeyTypeInconsistent,
            .user_already_logged_in => Error.UserAlreadyLoggedIn,
            .user_not_logged_in => Error.UserNotLoggedIn,
            .user_pin_not_initialized => Error.UserPINNotInitialized,
            .user_type_invalid => Error.UserTypeInvalid,
            .user_another_already_logged_in => Error.UserAnotherAlreadyLoggedIn,
            .user_too_many_types => Error.UserTooManyTypes,
            .wrapped_key_invalid => Error.WrappedKeyInvalid,
            .wrapped_key_len_range => Error.WrappedKeyLenRange,
            .wrapping_key_handle_invalid => Error.WrappingKeyHandleInvalid,
            .wrapping_key_size_range => Error.WrappingKeySizeRange,
            .wrapping_key_type_inconsistent => Error.WrappingKeyTypeInconsistent,
            .random_seed_not_supported => Error.RandomSeedNotSupported,
            .random_no_rng => Error.RandomNoRNG,
            .domain_params_invalid => Error.DomainParamsInvalid,
            .curve_not_supported => Error.CurveNotSupported,
            .buffer_too_small => Error.BufferTooSmall,
            .saved_state_invalid => Error.SavedStateInvalid,
            .information_sensitive => Error.InformationSensitive,
            .state_unsaveable => Error.StateUnsavable,
            .cryptoki_not_initialized => Error.CryptokiNotInitialized,
            .cryptoki_already_initialized => Error.CryptokiAlreadyInitialized,
            .mutex_bad => Error.MutexBad,
            .mutex_not_locked => Error.MutexNotLocked,
            .new_pin_mode => Error.NewPINMode,
            .next_otp => Error.NextOTP,
            .exceeded_max_iterations => Error.ExceededMaxIterations,
            .fips_self_test_failed => Error.FIPSSelfTestFailed,
            .library_load_failed => Error.LibraryLoadFailed,
            .pin_too_weak => Error.PINTooWeak,
            .public_key_invalid => Error.PublicKeyInvalid,
            .function_rejected => Error.FunctionRejected,
            else => Error.Unknown,
        };
    }
};

fn returnValueToError(rv: ReturnValue) Error {
    return switch (rv) {
        .cancel => Error.Cancel,
        .host_memory => Error.HostMemory,
        .slot_id_invalid => Error.SlotIdInvalid,
        .general_error => Error.GeneralError,
        .function_failed => Error.FunctionFailed,
        .arguments_bad => Error.ArgumentsBad,
        .no_event => Error.NoEvent,
        .need_to_create_threads => Error.NeedToCreateThreads,
        .cant_lock => Error.CantLock,
        .attribute_read_only => Error.AttributeReadOnly,
        .attribute_sensitive => Error.AttributeSensitive,
        .attribute_type_invalid => Error.AttributeTypeInvalid,
        .attribute_value_invalid => Error.AttributeValueInvalid,
        .action_prohibited => Error.ActionProhibited,
        .data_invalid => Error.DataInvalid,
        .data_len_range => Error.DataLenRange,
        .device_error => Error.DeviceError,
        .device_memory => Error.DeviceMemory,
        .device_removed => Error.DeviceRemoved,
        .encrypted_data_invalid => Error.EncryptedDataInvalid,
        .encrypted_data_len_range => Error.EncryptedDataLenRange,
        .function_canceled => Error.FunctionCancelled,
        .function_not_parallel => Error.FunctionNotParallel,
        .function_not_supported => Error.FunctionNotSupported,
        .key_handle_invalid => Error.KeyHandleInvalid,
        .key_size_range => Error.KeySizeRange,
        .key_type_inconsistent => Error.KeyTypeInconsistent,
        .key_not_needed => Error.KeyNotNeeded,
        .key_changed => Error.KeyChanged,
        .key_needed => Error.KeyNeeded,
        .key_indigestible => Error.KeyIndigestible,
        .key_function_not_permitted => Error.KeyFunctionNotPermitted,
        .key_not_wrappable => Error.KeyNotWrappable,
        .key_unextractable => Error.KeyUnextractable,
        .mechanism_invalid => Error.MechanismInvalid,
        .mechanism_param_invalid => Error.MechanismParamInvalid,
        .object_handle_invalid => Error.ObjectHandleInvalid,
        .operation_active => Error.OperationActive,
        .operation_not_initialized => Error.OperationNotInitialized,
        .pin_incorrect => Error.PINIncorrect,
        .pin_invalid => Error.PINInvalid,
        .pin_len_range => Error.PINLenRange,
        .pin_expired => Error.PINExpired,
        .pin_locked => Error.PINLocked,
        .session_closed => Error.SessionClosed,
        .session_count => Error.SessionCount,
        .session_handle_invalid => Error.SessionHandleInvalid,
        .session_parallel_not_supported => Error.SessionParallelNotSupported,
        .session_read_only => Error.SessionReadOnly,
        .session_exists => Error.SessionExists,
        .session_read_only_exists => Error.SessionReadOnlyExists,
        .session_read_write_so_exists => Error.SessionReadWriteSOExists,
        .signature_invalid => Error.SignatureInvalid,
        .signature_len_range => Error.SignatureLenRange,
        .template_incomplete => Error.TemplateIncomplete,
        .template_inconsistent => Error.TemplateInconsistent,
        .token_not_present => Error.TokenNotPresent,
        .token_not_recognized => Error.TokenNotRecognized,
        .token_write_protected => Error.TokenWriteProhibited,
        .unwrapping_key_handle_invalid => Error.UnwrappingKeyHandleInvalid,
        .unwrapping_key_size_range => Error.UnwrappingKeySizeRange,
        .unwrapping_key_type_inconsistent => Error.UnwrappingKeyTypeInconsistent,
        .user_already_logged_in => Error.UserAlreadyLoggedIn,
        .user_not_logged_in => Error.UserNotLoggedIn,
        .user_pin_not_initialized => Error.UserPINNotInitialized,
        .user_type_invalid => Error.UserTypeInvalid,
        .user_another_already_logged_in => Error.UserAnotherAlreadyLoggedIn,
        .user_too_many_types => Error.UserTooManyTypes,
        .wrapped_key_invalid => Error.WrappedKeyInvalid,
        .wrapped_key_len_range => Error.WrappedKeyLenRange,
        .wrapping_key_handle_invalid => Error.WrappingKeyHandleInvalid,
        .wrapping_key_size_range => Error.WrappingKeySizeRange,
        .wrapping_key_type_inconsistent => Error.WrappingKeyTypeInconsistent,
        .random_seed_not_supported => Error.RandomSeedNotSupported,
        .random_no_rng => Error.RandomNoRNG,
        .domain_params_invalid => Error.DomainParamsInvalid,
        .curve_not_supported => Error.CurveNotSupported,
        .buffer_too_small => Error.BufferTooSmall,
        .saved_state_invalid => Error.SavedStateInvalid,
        .information_sensitive => Error.InformationSensitive,
        .state_unsaveable => Error.StateUnsavable,
        .cryptoki_not_initialized => Error.CryptokiNotInitialized,
        .cryptoki_already_initialized => Error.CryptokiAlreadyInitialized,
        .mutex_bad => Error.MutexBad,
        .mutex_not_locked => Error.MutexNotLocked,
        .new_pin_mode => Error.NewPINMode,
        .next_otp => Error.NextOTP,
        .exceeded_max_iterations => Error.ExceededMaxIterations,
        .fips_self_test_failed => Error.FIPSSelfTestFailed,
        .library_load_failed => Error.LibraryLoadFailed,
        .pin_too_weak => Error.PINTooWeak,
        .public_key_invalid => Error.PublicKeyInvalid,
        .function_rejected => Error.FunctionRejected,
        else => Error.Unknown,
    };
}

pub fn returnIfError(rv: c_ulong) Error!void {
    const result: ReturnValue = @enumFromInt(rv);
    if (result != ReturnValue.ok) {
        return result.toError();
    }
}
